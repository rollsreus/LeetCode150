/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<int,int> m;
    
    void Add(TreeNode * t,int x){
        if(m[x]>m[t->val]){
            if(!t->right){
               t->right = new TreeNode(x);
               return;
            }
            else{
                Add(t->right,x);
            }                 
        }
        else
        {
            if(!t->left){
                t->left = new  TreeNode(x);
                return;
            }
            else
             Add(t->left,x);
        }
    }

    TreeNode* buildTree(vector<int>& in, vector<int>& post) {
         for(int i=0;i<in.size();i++){
            m[in[i]]=i;
         }
         reverse(post.begin(),post.end());
         TreeNode * root = new TreeNode(post[0]);
         
         for(int i=1;i<post.size();i++){
            Add(root,post[i]);
         }

         return root;
    }
};
