/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
void solve (TreeNode* root){
         if(root==NULL)
            return ;
       if(root->left!=NULL && root->right!=NULL){
         swap(root->left,root->right);
         solve(root->left);
         solve(root->right);
       }
       else if(root->left!=NULL && root->right==NULL){
         root->right = root->left;
         root->left = NULL;
         //invertTree(root->left);
         solve(root->right);
       }
       else if(root->left==NULL && root->right!=NULL){
         root->left = root->right;
         root->right = NULL;
         solve(root->left);
         //invertTree(root->right);
       }
       return ;
    }


    TreeNode* invertTree(TreeNode* root) {
       solve(root);
       return root;
    }
     
     bool isSameTree(TreeNode* p, TreeNode* q) {
        if(!p&&!q)
        return true;
        if(!p || !q)
        return false;
        return p->val == q->val && isSameTree(p->left,q->left) && isSameTree(p->right,q->right);
    } 

    bool isSymmetric(TreeNode* root) {
        if(!root)
        return true;
        return isSameTree(root->left,invertTree(root->right));
    }
};
